<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd 
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.uway.sports" />

    <task:scheduler id="scheduler" pool-size="10"/>

	<!--定时将APP用户日志从redis中入库 -->
	<task:scheduled-tasks scheduler="scheduler">
		<task:scheduled ref="CommonTask" method="addAppLog" cron="0 0/6 * * * ?"/>
		<task:scheduled ref="CommonTask" method="updateRanking" cron="0 0 1 1/1 * ?"/>
		<task:scheduled ref="CommonTask" method="addVote" cron="0 0/8 * * * ?"/>
		<task:scheduled ref="CommonTask" method="updateTxTeamVideo" cron="0 0/5 * * * ?"/>
		<task:scheduled ref="CommonTask" method="updateExpireSort" cron="0 0 0 1/1 * ?"/>
		<task:scheduled ref="CommonTask" method="updateExpireOrder" cron="0 0/4 * * * ?"/>
		<task:scheduled ref="CommonTask" method="getAndUpdateRanking" cron="0 0 2 1/1 * ?" />
		<!-- 动态热度定时调整 -->
		<task:scheduled ref="CommonTask" method="getMomentsHot" cron="0 0/30 * * * ?" />
		<!-- 用户被关注提醒 -->
		<task:scheduled ref="CommonTask" method="pushSendAttention" cron="0 5/30 7-21 * * ?" />
		<!-- 用户被点赞提醒 -->
		<task:scheduled ref="CommonTask" method="pushSendGood" cron="0 10/30 7-21 * * ?" />
		<!-- 用户关注人新动态提醒 -->
		<task:scheduled ref="CommonTask" method="pushSendMoments" cron="0 15/30 7-21 * * ?" />
		<!-- 用户报名赛事活动，参赛作品上传提醒 -->
		<task:scheduled ref="CommonTask" method="getTeamlistForNotWorksMoments" cron="0 20/30 7-21 * * ?" />


		<!-- 特殊赛事排名处理 -->
		<task:scheduled ref="CommonTask" method="getSpecialMatchRanking" cron="0 0/5 * * * ?" />
	</task:scheduled-tasks>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:sports.properties" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间,以毫秒为单位 -->
		<property name="maxWait" value="${maxWait}"></property>
		
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="testWhileIdle" value="true"></property>
		<!--validationQuery SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,
			则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
		<property name="validationQuery" value="select 1"></property>
		
		<!-- 代表在执行检查时，通过statement设置，statement.setQueryTimeout(validationQueryTimeout) -->
		<!-- <property name="validationQueryTimeout" value="1"></property> -->
		<!-- testOnBorrow指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.
			   注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<!-- <property name="testOnBorrow" value="false"></property> -->
		
		<!-- 指明是否在归还到池中前进行检验;注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<!-- <property name="testOnReturn" value="false"></property> -->
		
		<!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 ,
			定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数-->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="300000"></property> -->
		
		<!-- 超过removeAbandonedTimeout时间后，是否进行没用连接（废弃）的回收（默认为false，调整为true) -->
		<!-- <property name="removeAbandoned" value="true"></property> -->
		<!-- 超过时间限制，回收没有用(废弃)的连接,单位秒（默认为 300秒，调整为180） -->
		<!-- <property name="removeAbandonedTimeout" value="180"></property>   -->
	</bean>
	 
    <tx:annotation-driven transaction-manager="transactionManager" />  

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/uway/sports/mapping/**/*.xml"></property>
	</bean>

	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.uway.sports" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="annotationClass" value="com.uway.sports.common.dao.MyBatisDao"/>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置 JSR303 Bean Validator 定义 BaseController中用到-->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>

	<!-- 用于将对象转换为 JSON  -->
	<bean id="stringConverter"
		  class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="jsonConverter"
		  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>

	<!-- Redis 配置 20180122注释掉的-->
	<!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
		<!--<property name="maxTotal" value="${redis.pool.maxTotal}" />-->
		<!--<property name="maxIdle" value="${redis.pool.maxIdle}" />-->
		<!--<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />-->
		<!--<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />-->
	<!--</bean>-->

	<!-- JedisCluster 集群高可用配置 -->
	<!--<bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
        <constructor-arg index="0">
            <set>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip1}" />
                    <constructor-arg index="1" value="${redis.port1}" type="int" />
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip2}" />
                    <constructor-arg index="1" value="${redis.port2}" type="int" />
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip3}" />
                    <constructor-arg index="1" value="${redis.port3}" type="int" />
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip4}" />
                    <constructor-arg index="1" value="${redis.port4}" type="int" />
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip5}" />
                    <constructor-arg index="1" value="${redis.port5}" type="int" />
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg index="0" value="${redis.ip6}" />
                    <constructor-arg index="1" value="${redis.port6}" type="int" />
                </bean>
            </set>
        </constructor-arg>
        <constructor-arg index="1" value="2000" type="int"></constructor-arg>
        <constructor-arg index="2" value="100" type="int"></constructor-arg>
        <constructor-arg index="3" ref="jedisPoolConfig"></constructor-arg>
    </bean>-->

	<!--redis Sentinel主从高可用方案配置 -->
	<!-- <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="master-1"></property>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${sentinel1.ip}"></constructor-arg>
                    <constructor-arg name="port" value="${sentinel1.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${sentinel2.ip}"></constructor-arg>
                    <constructor-arg name="port" value="${sentinel2.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${sentinel3.ip}"></constructor-arg>
                    <constructor-arg name="port" value="${sentinel3.port}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true">
        <property name="password" value="${redis.pass}" />
        <property name="poolConfig">
            <ref bean="jedisPoolConfig" />
        </property>
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration" />
    </bean> -->

	<!-- redis单节点数据库连接配置 20180122注释掉的-->
	<!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
		<!--<property name="hostName" value="${redis.ip}" />-->
		<!--<property name="port" value="${redis.port}" />-->
		<!--<property name="password" value="${redis.pass}" />-->
		<!--<property name="poolConfig" ref="jedisPoolConfig" />-->
	<!--</bean>-->

	<!-- 20180122注释掉的 redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 -->
	<!--<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
		<!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
		<!--<property name="keySerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
		<!--</property>-->
		<!--<property name="valueSerializer">-->
			<!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
		<!--</property>-->
	<!--</bean>-->
</beans>